package burp.utils;

import burp.BurpExtender;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.scanner.audit.issues.AuditIssue;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.nio.file.Path;
import burp.utils.Utilities;

public class SourceMapper {
    private static MontoyaApi api;
    private final HttpRequestResponse requestResponse;
    private final String jsonMapFile;
    private final Path outputDirPath;

    public static void setApi(MontoyaApi api) {
        SourceMapper.api = api;
    }

    public SourceMapper(HttpRequestResponse requestResponse, String jsonMapFile, Path outputDirPath) {
        this.requestResponse = requestResponse;
        this.jsonMapFile = jsonMapFile;
        this.outputDirPath = outputDirPath;
        if (api == null) {
            api = Utilities.getApi(); // Fallback to get API from Utilities if not set directly
        }
        parseMapFile();
    }

    public void parseMapFile() {
        ObjectMapper objectMapper = new ObjectMapper()
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try {
            JSMapFile mapFile = objectMapper.readValue(jsonMapFile, JSMapFile.class);
            
            if (mapFile.getSources() == null || mapFile.getSourcesContent() == null || 
                mapFile.getSources().length != mapFile.getSourcesContent().length) {
                api.logging().logToError("Invalid source map file structure");
                return;
            }

            for (int i = 0; i < mapFile.getSources().length; i++) {
                String source = mapFile.getSources()[i];
                String content = mapFile.getSourcesContent()[i];
                
                if (source == null || content == null) {
                    continue;
                }

                if (FileUtils.saveFile(
                        source.replaceAll("\\?.*", "")
                             .replaceAll("[?%*|:\"<>~]", "_"),
                        content.getBytes(),
                        outputDirPath
                )) {
                    sendJSMapperIssue();
                }
            }
        } catch (Exception e) {
            api.logging().logToError("Error processing the file - parseMapFile Exception: " + e.getMessage());
        }
    }

    private void sendJSMapperIssue() {
        try {
            AuditIssue issue = CustomScanIssue.from(
                    requestResponse,
                    "[JS Miner-NG] JavaScript Source Mapper",
                    "This issue was generated by \"" + BurpExtender.EXTENSION_NAME + "\" Burp extension.<br><br>" +
                            "It was possible to retrieve JavaScript source map files of the target host." +
                            "The retrieved (front-end) source code is available (for manual review) in the following location:<br><br>"
                            + "<b>" + outputDirPath + "</b>",
                    null,
                    "Information",
                    "Certain"
            );
            api.siteMap().add(issue);
        } catch (Exception e) {
            api.logging().logToError("Error creating source mapper issue: " + e.getMessage());
        }
    }
}
