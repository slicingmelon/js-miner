package burp.utils;

import burp.BurpExtender;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.scanner.audit.issues.AuditIssue;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.nio.file.Path;
import burp.utils.Utilities;

public class SourceMapper {
    private static MontoyaApi api;
    private final HttpRequestResponse requestResponse;
    private final String jsonMapFile;
    private final Path outputDirPath;

    public static void setApi(MontoyaApi api) {
        SourceMapper.api = api;
    }

    public SourceMapper(HttpRequestResponse requestResponse, String jsonMapFile, Path outputDirPath) {
        this.requestResponse = requestResponse;
        this.jsonMapFile = jsonMapFile;
        this.outputDirPath = outputDirPath;
        if (api == null) {
            api = Utilities.getApi();
        }
        parseMapFile();
    }

    public void parseMapFile() {
        ObjectMapper objectMapper = new ObjectMapper()
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try {
            JSMapFile mapFile = objectMapper.readValue(jsonMapFile, JSMapFile.class);
            
            // Validate map file structure
            if (mapFile == null || mapFile.getSources() == null || mapFile.getSourcesContent() == null) {
                api.logging().logToError("Invalid map file structure - null components");
                return;
            }

            int sourcesLength = mapFile.getSources().length;
            int contentLength = mapFile.getSourcesContent().length;
            
            if (sourcesLength != contentLength) {
                api.logging().logToError("Mismatched sources and sourcesContent lengths: " + 
                    sourcesLength + " vs " + contentLength);
                return;
            }

            boolean foundValidSource = false;
            for (int i = 0; i < sourcesLength; i++) {
                String source = mapFile.getSources()[i];
                String content = mapFile.getSourcesContent()[i];
                
                if (source == null || content == null || source.trim().isEmpty()) {
                    continue;
                }

                // Clean the source path
                String cleanSource = source
                    .replaceAll("\\?.*", "")  // Remove query parameters
                    .replaceAll("[?%*|:\"<>~]", "_") // Replace invalid chars with underscore
                    .replaceAll("^[./\\\\]+", "");  // Remove leading path separators
                
                if (FileUtils.saveFile(cleanSource, content.getBytes(), outputDirPath)) {
                    foundValidSource = true;
                }
            }

            if (foundValidSource) {
                sendJSMapperIssue();
            }
            
        } catch (Exception e) {
            api.logging().logToError("Error processing map file: " + e.getMessage());
            for (StackTraceElement element : e.getStackTrace()) {
                api.logging().logToError("\tat " + element.toString());
            }
        }
    }

    private void sendJSMapperIssue() {
        try {
            AuditIssue issue = CustomScanIssue.from(
                    requestResponse,
                    "[JS Miner-NG] JavaScript Source Mapper",
                    "This issue was generated by \"" + BurpExtender.EXTENSION_NAME + "\" Burp extension.<br><br>" +
                            "It was possible to retrieve JavaScript source map files of the target host. " +
                            "The retrieved (front-end) source code is available (for manual review) in the following location:<br><br>" +
                            "<b>" + outputDirPath + "</b>",
                    null,
                    "Information",
                    "Certain"
            );
            api.siteMap().add(issue);
        } catch (Exception e) {
            api.logging().logToError("Error creating source mapper issue: " + e.getMessage());
        }
    }
}
