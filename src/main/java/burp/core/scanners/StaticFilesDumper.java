package burp.core.scanners;

import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.utils.CustomScanIssue;
import burp.utils.FileUtils;
import burp.utils.Utilities;
import burp.core.TaskRepository;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.*;
import java.util.UUID;

public class StaticFilesDumper implements Runnable {
    private final MontoyaApi api;
    private final TaskRepository taskRepository;
    private final HttpRequestResponse requestResponse;
    private Path outputDirectory;
    private final Path targetDirPath;
    private final UUID taskUUID;
    private final boolean isLastIterator;

    public StaticFilesDumper(MontoyaApi api, HttpRequestResponse requestResponse, long currentTimestamp, 
                            UUID taskUUID, boolean isLastIterator) {
        this.api = api;
        this.taskRepository = TaskRepository.getInstance();
        this.requestResponse = requestResponse;
        this.taskUUID = taskUUID;
        this.isLastIterator = isLastIterator;

        String jsURL = requestResponse.request().url().toString();
        URI requestURI = null;
        try {
            requestURI = new URI(jsURL);
        } catch (URISyntaxException e) {
            api.logging().logToError("URISyntaxException: " + e.getMessage());
        }
        this.targetDirPath = Utilities.urlToPath(requestURI);

        try {
            URL jsMapURL = new URL(jsURL + ".map");
            this.outputDirectory = Paths.get(System.getProperty("user.home"))
                    .resolve(".BurpSuite")
                    .resolve("JS-Miner")
                    .resolve("Dump")
                    .resolve(jsMapURL.getHost() + "-" + currentTimestamp);
        } catch (Exception e) {
            api.logging().logToError("Error setting output directory: " + e.getMessage());
        }
    }

    @Override
    public void run() {
        taskRepository.startTask(taskUUID);
        
        byte[] responseBodyBytes = requestResponse.response().body().getBytes();

        if (FileUtils.saveFile(targetDirPath.toString(), responseBodyBytes, outputDirectory)
                && isLastIterator) {
            sendStaticFilesDumperIssue();
            cleanupTmpDirectory();
        }

        taskRepository.completeTask(taskUUID);
    }

    private void cleanupTmpDirectory() {
        Path tmpDir = outputDirectory.resolve("tmp");
        if (Utilities.isDirEmpty(tmpDir)) {
            try {
                Files.delete(tmpDir);
            } catch (NoSuchFileException x) {
                api.logging().logToError(tmpDir + ": no such file or directory");
            } catch (DirectoryNotEmptyException x) {
                api.logging().logToError(tmpDir + " not empty");
            } catch (IOException x) {
                api.logging().logToError("Error cleaning tmp directory: " + x.getMessage());
            }
        }
    }

    private void sendStaticFilesDumperIssue() {
        try {
            api.siteMap().add(CustomScanIssue.from(
                    requestResponse,
                    "[JS Miner] Static Files Dumper",
                    "Static files were extracted to the following location: " + outputDirectory,
                    "This issue was generated by JS Miner-NG Burp extension.",
                    "Information",
                    "Certain"
            ));
        } catch (Exception e) {
            api.logging().logToError("Error sending Static Files Dumper issue: " + e.getMessage());
        }
    }
}
